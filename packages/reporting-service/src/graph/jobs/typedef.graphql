enum ReportingJobFileType {
  JSON
  YAML
}

enum FieldBaseOperators {
  AND
  OR
}

enum FieldOperators {
  EQ
  LT
  LTE
  GT
  GTE
  IN
}

type ReportingFn {
  method: String
  endpoint: String
}

type ReportingPayloadField {
  condition: FieldBaseOperators
  not: Boolean
  rules: [ReportingRule]
}

type ReportingPayloadFieldRule {
  field: String
  operator: FieldOperators
  value: String
}

type JobEffectEmail {
  to: String
  template: String
  cc: String
}

input JobEffectEmailInput {
  to: String!
  template: String!
  cc: String
}

input JobEffectInput {
  email: JobEffectEmailInput
}

union JobEffects = JobEffectEmail

union ReportingRule = ReportingPayloadField | ReportingPayloadFieldRule

type ReportingJobPayload {
  type: ReportingJobFileType
  fields: ReportingPayloadField
}

type ReportingJob {
  payload: ReportingJobPayload
  fn: ReportingFn
}

type ReportingJobConfig {
  id: ID
  name: String
  description: String
  createdBy: ReportingUser
  updatedBy: ReportingUser
  createdAt: DateTime
  updatedAt: DateTime
  cron: String
  jobs: [ReportingJob]
  effects: [JobEffects]
}

# INPUTS
input CreateReportingJobInput {
  name: String!
  description: String
  cron: String
  jobs: [CreateReportingJob]
  effects: JobEffectInput
}

input UpdateReportingJobInput {
  name: String
  description: String
  cron: String
  jobs: [CreateReportingJob]
}

input ReportingPayloadFieldInput {
  condition: FieldBaseOperators
  not: Boolean
  rules: [ReportingRuleInput]
}

input ReportingRuleInput {
  field: String
  operator: FieldOperators
  value: String
  rule: [ReportingPayloadFieldInput]
}

input CreateReportingJobFnInput {
  method: String!
  endpoint: String!
}

input UpdateReportingJobFnInput {
  method: String
  endpoint: String
}

input ReportingJobPayloadInput {
  type: ReportingJobFileType
  fields: ReportingPayloadFieldInput
}

input CreateReportingJob {
  payload: ReportingJobPayloadInput
  fn: CreateReportingJobFnInput!
}

type Query {
  listReportingJobs(projectID: ID!): [ReportingJobConfig]
  getReportingJobByID(projectID: ID!, id: ID!): ReportingJobConfig
}

type Mutation {
  createReportingJob(projectID: ID!, data: CreateReportingJobInput!): ReportingJobConfig
  updateReportingJobByID(
    projectID: ID!
    jobID: ID!
    data: UpdateReportingJobInput!
  ): ReportingJobConfig
  deleteReportingJobByID(projectID: ID!, jobID: ID!): ReportingJobConfig
}
